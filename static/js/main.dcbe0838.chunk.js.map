{"version":3,"sources":["components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/TodoList/index.js","components/TodoList/List.js","components/SignIn/index.js","components/SignIn/SignIn.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["FirebaseContext","React","createContext","withFirebase","Component","props","react_default","a","createElement","Consumer","firebase","Object","assign","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","components_Firebase","Firebase","_this","this","classCallCheck","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","doGetList","db","collection","doc","get","doSubscribe","callback","onSnapshot","data","list","doAddNewTodo","todo","update","app","firestore","FieldValue","arrayUnion","doRemoveTodo","arrayRemove","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","ref","concat","users","messages","initializeApp","List","state","todos","inputValue","handleNewTodo","event","preventDefault","length","setState","handleRemoveTodo","index","_this2","then","_this3","_this$state","className","onSubmit","type","value","onChange","e","target","map","key","onClick","SignIn","username","handleSubmit","handleInputChange","defineProperty","name","App","possibleConstructorReturn","getPrototypeOf","call","JSON","parse","localStorage","getItem","listener","setItem","stringify","removeItem","Fragment","TodoList","components_SignIn","Boolean","window","location","hostname","match","ReactDOM","render","context","Provider","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcbe0838.chunk.js","sourcesContent":["import React from \"react\"\n\nconst FirebaseContext = React.createContext(null)\n\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n        {firebase => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n)\n\nexport default FirebaseContext\n","import app from \"firebase/app\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\n\nconst prodConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n}\n\nconst devConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n}\n\nconst config = process.env.NODE_ENV === \"production\" ? prodConfig : devConfig\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config)\n        this.db = app.firestore()\n        this.auth = app.auth()\n    }\n\n    // *** Auth API ***\n\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password)\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password)\n\n    doSignOut = () => this.auth.signOut()\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email)\n\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password)\n\n    doGetList = () =>\n        this.db\n            .collection(\"todo\")\n            .doc(\"list\")\n            .get()\n\n    doSubscribe = callback =>\n        this.db\n            .collection(\"todo\")\n            .doc(\"list\")\n            .onSnapshot(doc => callback(doc.data().list))\n\n    doAddNewTodo = todo =>\n        this.db\n            .collection(\"todo\")\n            .doc(\"list\")\n            .update({\n                list: app.firestore.FieldValue.arrayUnion(todo)\n            })\n\n    doRemoveTodo = todo =>\n        this.db\n            .collection(\"todo\")\n            .doc(\"list\")\n            .update({\n                list: app.firestore.FieldValue.arrayRemove(todo)\n            })\n\n    // *** Merge Auth and DB User API *** //\n\n    onAuthUserListener = (next, fallback) =>\n        this.auth.onAuthStateChanged(authUser => {\n            if (authUser) {\n                // this.user(authUser.uid)\n                //     .once(\"value\")\n                //     .then(snapshot => {\n                //         const dbUser = snapshot.val()\n\n                //         // default empty roles\n                //         if (!dbUser.roles) {\n                //             dbUser.roles = []\n                //         }\n\n                //         // merge auth and db user\n                //         authUser = {\n                //             uid: authUser.uid,\n                //             email: authUser.email,\n                //             ...dbUser\n                //         }\n\n                //         next(authUser)\n                //     })\n\n                next(authUser)\n            } else {\n                fallback()\n            }\n        })\n\n    // *** User API ***\n\n    user = uid => this.db.ref(`users/${uid}`)\n\n    users = () => this.db.ref(\"users\")\n\n    // *** Message API ***\n\n    messages = () => this.db.ref(\"messages\")\n}\n\nexport default Firebase\n","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };\n","import List from './List.js'\n\nexport default List\n","import React, { Component } from \"react\"\nimport { withFirebase } from \"../Firebase/\"\nimport \"./List.css\"\n\nclass List extends Component {\n    state = {\n        todos: [],\n        inputValue: \"\"\n    }\n\n    componentDidMount() {\n        this.props.firebase\n            .doGetList()\n            .then(doc => this.setState({ todos: doc.data().list }))\n\n        this.props.firebase.doSubscribe(todos => this.setState({ todos }))\n    }\n\n    handleNewTodo = event => {\n        event.preventDefault()\n        const { inputValue } = this.state\n        if (inputValue.length > 0) {\n            this.setState({ inputValue: \"\" })\n            this.props.firebase.doAddNewTodo(inputValue)\n        }\n    }\n\n    handleRemoveTodo = index => {\n        const { todos } = this.state\n        this.props.firebase.doRemoveTodo(todos[index])\n    }\n\n    render() {\n        const { todos, inputValue } = this.state\n        return (\n            <div className=\"list-container\">\n                <h1>Saker Att Göra Medan Man Pussas</h1>\n                <form onSubmit={this.handleNewTodo}>\n                    <input\n                        type=\"text\"\n                        value={inputValue}\n                        onChange={e =>\n                            this.setState({ inputValue: e.target.value })\n                        }\n                    />\n                    <input type=\"submit\" value=\"+\"/>\n                </form>\n                <div className=\"list\">\n                    <ul>\n                        {todos.map((todo, index) => (\n                            <li key={index}>\n                                <span>{todo}</span>\n                                <button\n                                    onClick={() => this.handleRemoveTodo(index)}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withFirebase(List)\n","import SignIn from './SignIn.js'\n\nexport default SignIn\n","import React, { Component } from \"react\"\nimport { withFirebase } from \"../Firebase/\"\n\nclass SignIn extends Component {\n    state = {\n        username: \"\",\n        password: \"\"\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        this.props.firebase.doSignInWithEmailAndPassword(\n            this.state.username,\n            this.state.password\n        )\n    }\n\n    handleInputChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        type=\"text\"\n                        name=\"username\"\n                        onChange={this.handleInputChange}\n                    />\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        onChange={this.handleInputChange}\n                    />\n                    <input type=\"submit\" />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default withFirebase(SignIn)\n","import App from \"./App.js\"\n\nexport default App\n","import React, { Component } from \"react\"\nimport List from \"../TodoList\"\nimport { withFirebase } from \"../Firebase/\"\nimport SignIn from \"../SignIn/\"\nimport \"./App.css\"\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            authUser: JSON.parse(localStorage.getItem(\"authUser\"))\n        }\n    }\n\n    componentDidMount() {\n        this.listener = this.props.firebase.onAuthUserListener(\n            authUser => {\n                localStorage.setItem(\"authUser\", JSON.stringify(authUser))\n                this.setState({ authUser })\n            },\n            () => {\n                localStorage.removeItem(\"authUser\")\n                this.setState({ authUser: null })\n            }\n        )\n    }\n\n    componentWillUnmount() {\n        this.listener()\n    }\n\n    render() {\n        const { firebase } = this.props\n        return (\n            <div className=\"App\">\n                {firebase.auth.currentUser ? (\n                    <React.Fragment>\n                        <header>\n                            <button onClick={firebase.doSignOut}>\n                                Logga Ut\n                            </button>\n                        </header>\n                        <List />\n                    </React.Fragment>\n                ) : (\n                    <SignIn />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default withFirebase(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./components/App\"\nimport Firebase, { FirebaseContext } from \"./components/Firebase\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <FirebaseContext.Provider value={new Firebase()}>\n        <App />\n    </FirebaseContext.Provider>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}